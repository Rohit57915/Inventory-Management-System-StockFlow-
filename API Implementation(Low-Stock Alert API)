@app.route('/api/companies/<int:company_id>/alerts/low-stock', methods=['GET'])
def low_stock_alerts(company_id):
    recent_sales_days = 30
    alerts = []

    query = """
        SELECT p.id AS product_id, p.name AS product_name, p.sku, 
               w.id AS warehouse_id, w.name AS warehouse_name,
               i.quantity AS current_stock, p.threshold,
               s.id AS supplier_id, s.name AS supplier_name, s.contact_email
        FROM Inventory i
        JOIN Products p ON p.id = i.product_id
        JOIN Warehouses w ON w.id = i.warehouse_id
        LEFT JOIN ProductSuppliers ps ON ps.product_id = p.id
        LEFT JOIN Suppliers s ON s.id = ps.supplier_id
        WHERE w.company_id = %s
          AND i.quantity < p.threshold
          AND EXISTS (
              SELECT 1 FROM Sales sa
              WHERE sa.product_id = p.id AND sa.created_at >= now() - interval '%s days'
          )
    """
    rows = db.session.execute(query, (company_id, recent_sales_days))

    for row in rows:
        days_until_stockout = estimate_days_until_stockout(row.product_id)
        alerts.append({
            "product_id": row.product_id,
            "product_name": row.product_name,
            "sku": row.sku,
            "warehouse_id": row.warehouse_id,
            "warehouse_name": row.warehouse_name,
            "current_stock": row.current_stock,
            "threshold": row.threshold,
            "days_until_stockout": days_until_stockout,
            "supplier": {
                "id": row.supplier_id,
                "name": row.supplier_name,
                "contact_email": row.contact_email
            }
        })

    return {"alerts": alerts, "total_alerts": len(alerts)}
